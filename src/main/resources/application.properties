app.id=L010301
# set apollo meta server address, adjust to actual address if necessary
apollo.meta=http://10.10.10.197:8080
apollo.cluster = test
# will inject 'application' namespace in bootstrap phase
apollo.bootstrap.enabled = true

#spring.main.allow-bean-definition-overriding=true
#eureka.client.fetch-registry = false
#eureka.client.register-with-eureka = false


spring.cloud.stream.bindings.user_input.destination = user-service
spring.cloud.stream.bindings.user_output.destination = user-service
spring.cloud.stream.default-binder = kafka
spring.kafka.bootstrap-servers = 222.73.159.76:8085
spring.kafka.consumer.group-id = consumer1
spring.kafka.producer.client-id = producer1
spring.kafka.producer.retries = 0
spring.kafka.producer.batch-size = 16384
spring.kafka.producer.buffer-memory = 33554432
spring.kafka.producer.key-serializer = org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer = org.apache.kafka.common.serialization.StringSerializer
spring.kafka.consumer.auto-offset-reset = earliest
spring.kafka.consumer.enable-auto-commit = true
spring.kafka.consumer.auto-commit-interval = 100
spring.kafka.consumer.key-deserializer = org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer = org.apache.kafka.common.serialization.StringDeserializer
#spring.cloud.stream.kafka.binder.brokers=127.0.0.1:9092
#spring.cloud.stream.kafka.binder.minPartitionCount=3
#spring.cloud.stream.kafka.binder.autoCreateTopics=true
#spring.cloud.stream.kafka.binder.autoAddPartitions=true
# 复制因子
#spring.cloud.stream.kafka.binder.replicationFactor=3


# springCloudBus 设置为3个partition 指定多少个分区
#spring.cloud.stream.bindings.springCloudBusOutput.producer.partitionCount= 3
#指定分区的算法，类似于hash算法，保证将同一消息hash到一个目的结点上。
#spring.cloud.stream.bindings.springCloudBusOutput.producer.partitionKeyExppression =payload.id

#mybatis
mybatis.configuration.lazy-loading-enabled=true
#false 为按需加载
mybatis.configuration.aggressive-lazy-loading=false